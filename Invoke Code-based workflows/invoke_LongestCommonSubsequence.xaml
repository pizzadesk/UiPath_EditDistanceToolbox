<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.String1="Kitten" this:Main.String2="The quick brown fox jumps over the hedge" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="First input string. " Name="String1" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Second input string." Name="String2" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="The longest part output as string that is identical between two input strings." Name="LCSString" Type="OutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Length of the string that is identical in both input strings." Name="LCSLength" Type="OutArgument(x:Int32)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1872,1432</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Numerics</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Finds the longest part that appears in both words in the same order. Helps in comparing versions of documents." DisplayName="Longest Common Subsequence" sap:VirtualizedContainerService.HintSize="608,1367" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="ExceptionOutput" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="546,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Longest Common Subsequence: START&quot;]" />
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Input strings (these should be defined as arguments in UiPath)&#xA;Dim s As String = s1&#xA;Dim t As String = s2&#xA;&#xA;' Initialize the lengths of the strings&#xA;Dim n As Integer = s.Length&#xA;Dim m As Integer = t.Length&#xA;&#xA;' Output argument for exception messages&#xA;Dim exceptionMessage As String = String.Empty&#xA;&#xA;Try&#xA;    ' Initialize the LCS length variable&#xA;    Dim lcsLength As Integer&#xA;&#xA;    ' Initialize the LCS string variable&#xA;    Dim lcsString As String = &quot;&quot;&#xA;&#xA;    ' Edge case for empty strings&#xA;    If n = 0 Or m = 0 Then&#xA;        Console.WriteLine(&quot;One of the strings is empty, LCS length is 0.&quot;)&#xA;        LCSLength = 0&#xA;        LCSString = lcsString&#xA;        Return&#xA;    End If&#xA;&#xA;    ' Initialize the LCS matrix&#xA;    Dim dp(n + 1, m + 1) As Integer&#xA;&#xA;    ' Compute the LCS length&#xA;    For i As Integer = 1 To n&#xA;        For j As Integer = 1 To m&#xA;            If s(i - 1) = t(j - 1) Then&#xA;                dp(i, j) = dp(i - 1, j - 1) + 1&#xA;            Else&#xA;                dp(i, j) = Math.Max(dp(i - 1, j), dp(i, j - 1))&#xA;            End If&#xA;        Next j&#xA;    Next i&#xA;&#xA;    lcsLength = dp(n, m)&#xA;    Console.WriteLine(&quot;LCS length computed: &quot; &amp; lcsLength)&#xA;&#xA;    ' Reconstruct the LCS string&#xA;    Dim p As Integer = n&#xA;    Dim q As Integer = m&#xA;&#xA;    While p &gt; 0 AndAlso q &gt; 0&#xA;        If s(p - 1) = t(q - 1) Then&#xA;            lcsString = s(p - 1) &amp; lcsString&#xA;            p -= 1&#xA;            q -= 1&#xA;        ElseIf dp(p - 1, q) &gt;= dp(p, q - 1) Then&#xA;            p -= 1&#xA;        Else&#xA;            q -= 1&#xA;        End If&#xA;    End While&#xA;&#xA;    ' Output the LCS string&#xA;    Console.WriteLine(&quot;LCS String: &quot; &amp; lcsString)&#xA;&#xA;    ' Assign the results to the output arguments (defined in UiPath)&#xA;    SubsequenceLength = lcsLength&#xA;    SubsequenceString = lcsString&#xA;&#xA;Catch ex As Exception&#xA;    ' Handle exceptions by setting the output argument&#xA;    exceptionMessage = ex.Message&#xA;    Console.WriteLine($&quot;Exception: {exceptionMessage}&quot;)&#xA;End Try&#xA;&#xA;' Assign the exception message to the output argument (defined in UiPath)&#xA;ExceptionOutput = exceptionMessage&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="546,277" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="s1">[String1]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="s2">[String2]</InArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="SubsequenceLength">[LCSLength]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="SubsequenceString">[LCSString]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="ExceptionOutput">[ExceptionOutput]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <If Condition="[not String.IsNullOrEmpty(ExceptionOutput)]" DisplayName="Did the code encounter an exception?" sap:VirtualizedContainerService.HintSize="546,623" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Exception in code block" sap:VirtualizedContainerService.HintSize="512,201" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw Exception="[new Exception(ExceptionOutput)]" sap:VirtualizedContainerService.HintSize="450,113" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="No exception in code block" sap:VirtualizedContainerService.HintSize="512,252" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,164" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Warn" Message="[&quot;Longest commong string between &quot;+String1+&quot; and &quot;+String2+&quot; is '&quot;+LCSString+&quot;' , length &quot;+LCSLength.ToString]" />
        </Sequence>
      </If.Else>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="546,164" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Longest Common Subsequence: END&quot;]" />
  </Sequence>
</Activity>