<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.String1="Cauliflower" this:Main.String2="AAAliflower" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="First input string. Must be the same length as the other input string." Name="String1" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Second input string. Must be the same length as the other input string." Name="String2" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Hamming Distance output as Int32. A distance of 0 means the strings are identical.&#xA;A higher distance indicates more differences between the strings." Name="HDistance" Type="OutArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary of dissimilarities. Keys are Int32 and define position that uses one-based indexing (position 1 key is 1, 2 is 2 etc), and Values are the dissimilar symbol as String in that position." Name="DissimilarSymbolDictionary" Type="OutArgument(scg:Dictionary(x:Int32, x:String))" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1872,1492</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Numerics</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Counts differences between two strings of the same length. Used in error detection.&#xA;&#xA;Interpretation:&#xA;Hamming distance indicates the number of positions at which the corresponding symbols are different.&#xA;A distance of 0 means the strings are identical.&#xA;A higher distance indicates more differences between the strings." DisplayName="Hamming_Distance" sap:VirtualizedContainerService.HintSize="608,1427" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="ExceptionOutput" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="546,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Hamming Distance: START&quot;]" />
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Input strings (these should be defined as arguments in UiPath)&#xA;Dim s As String = s1&#xA;Dim t As String = s2&#xA;&#xA;' Initialize the lengths of the strings&#xA;Dim sLength As Integer = s.Length&#xA;Dim tLength As Integer = t.Length&#xA;&#xA;' Output argument for exception messages&#xA;Dim exceptionMessage As String = String.Empty&#xA;&#xA;Try&#xA;    ' Check if the strings have equal length&#xA;    If sLength &lt;&gt; tLength Then&#xA;        Throw New ArgumentException(&quot;Strings must be of equal length for Hamming Distance.&quot;)&#xA;    End If&#xA;&#xA;    ' Initialize the Hamming distance variable and the dictionary to store dissimilar symbols and their positions&#xA;    Dim hammingDistance As Integer = 0&#xA;    Dim dissimilarSymbols As New Dictionary(Of Integer, String)&#xA;&#xA;    ' Compute the Hamming distance and identify dissimilar symbols&#xA;    For i As Integer = 0 To sLength - 1&#xA;        If s(i) &lt;&gt; t(i) Then&#xA;            hammingDistance += 1&#xA;            dissimilarSymbols.Add(i + 1, s(i).ToString())&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Output the Hamming distance&#xA;    Console.WriteLine($&quot;Hamming Distance computed: {hammingDistance}&quot;)&#xA;&#xA;    ' Assign the results to the output arguments (defined in UiPath)&#xA;    HDistance = hammingDistance&#xA;    DissSymbols = dissimilarSymbols&#xA;&#xA;Catch ex As Exception&#xA;    ' Handle exceptions by setting the output argument&#xA;    exceptionMessage = ex.Message&#xA;    Console.WriteLine($&quot;Exception: {exceptionMessage}&quot;)&#xA;End Try&#xA;&#xA;' Assign the exception message to the output argument (defined in UiPath)&#xA;ExceptionOutput = exceptionMessage" DisplayName="Execute Hamming Distance calculation with VB.net" sap:VirtualizedContainerService.HintSize="546,277" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="s1">[String1]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="s2">[String2]</InArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="HDistance">[HDistance]</OutArgument>
        <OutArgument x:TypeArguments="scg:Dictionary(x:Int32, x:String)" x:Key="DissSymbols">[DissimilarSymbolDictionary]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="ExceptionOutput">[ExceptionOutput]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <If Condition="[not String.IsNullOrEmpty(ExceptionOutput)]" DisplayName="Did the code encounter an exception?" sap:VirtualizedContainerService.HintSize="546,623" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Exception in code block" sap:VirtualizedContainerService.HintSize="512,201" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw Exception="[new Exception(ExceptionOutput)]" sap:VirtualizedContainerService.HintSize="450,113" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="No exception in code block" sap:VirtualizedContainerService.HintSize="512,252" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,164" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Warn" Message="[&quot;Hamming Distance between &quot;+String1+&quot; and &quot;+String2+&quot; is &quot;+HDistance.ToString]" />
        </Sequence>
      </If.Else>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="546,164" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Hamming Distance: END&quot;]" />
  </Sequence>
</Activity>